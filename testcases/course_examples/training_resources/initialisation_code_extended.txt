  !> Initialisation callback hook which will read in location and 
  !! temperature 
  !! @param current_state The current model state
  subroutine initialisation_callback(current_state)
    type(model_state_type), intent(inout), target :: current_state

    ! Local variables
    integer :: nxloc, nyloc

    ! File for reading in temperature data
    character(100) :: island_file
    integer :: ncid, varid, xlen, ylen, numDims
    integer, dimension(nf90_max_var_dims) :: dimIds

    nxloc=options_get_array_size(current_state%options_database, "island_xloc")
    nyloc=options_get_array_size(current_state%options_database, "island_yloc")

    if (nxloc /= nyloc)then
      call log_master_log(LOG_ERROR, "Islands component requires the same number of x and y locations")
    end if

    n_islands=nxloc

    island_from_file=options_get_logical(current_state%options_database, "island_from_file")

    if (island_from_file)then
      ! Option to read in from file
      island_file=options_get_string(current_state%options_database, "island_file")

      ! Open the file
      call check( nf90_open(island_file, NF90_NOWRITE, ncid) )
      
      ! Get the varid of the data variable, based on its name.
      call check( nf90_inq_varid(ncid, "temperature", varid) )

      ! Get the size of the data variable, based on its varid.
      call check( nf90_inquire_variable(ncid, varid, ndims = numDims) )
      call check( nf90_inquire_variable(ncid, varid, dimids = dimIds(:numDims)) )

      call check( nf90_inquire_dimension(ncid, dimIDs(1), len = xlen) )
      call check( nf90_inquire_dimension(ncid, dimIDs(2), len = ylen) )
      
      ! Read the data.
      allocate(island_temperature_map(xlen, ylen))

      call check( nf90_get_var(ncid, varid, island_temperature_map) )
      
      call check( nf90_close(ncid) )
    else

      ! Allocations
      allocate(island_xloc(n_islands), island_yloc(n_islands),     &
         island_semimajor(n_islands), island_semiminor(n_islands), &
         island_angle(n_islands), island_temperature(n_islands)    & 
         )
      ! Read in parameters from options database
      call options_get_real_array(current_state%options_database, "island_xloc", island_xloc) 
      call options_get_real_array(current_state%options_database, "island_yloc", island_yloc) 
      call options_get_real_array(current_state%options_database, "island_semimajor", island_semimajor) 
      call options_get_real_array(current_state%options_database, "island_semiminor", island_semiminor) 
      call options_get_real_array(current_state%options_database, "island_angle", island_angle) 
      call options_get_real_array(current_state%options_database, "island_temperature", island_temperature) 
    end if

  end subroutine initialisation_callback


  subroutine check(status)
    integer, intent ( in) :: status
    
    if(status /= nf90_noerr) then 
      print *, trim(nf90_strerror(status))
      stop "Stopped"
    end if
  end subroutine check  
